/**
 * ServiceM8 Token Retriever
 * 
 * Script Explanation:
 * This script retrieves a token from Google Secret Manager and makes it available as a constant 
 * that can be used in any function within the Google Apps Script project. The token is typically 
 * used for authorization purposes when making requests to the ServiceM8 API.
 * 
 * How to Use:
 * 1. Set up a secret named "serviceM8_token" in Google Secret Manager, containing the token value.
 * 2. Replace "YOUR_PROJECT_ID" in the script with your actual Google Cloud project ID.
 * 3. Call the SERVICE_M8_TOKEN constant in any function where the token is needed for authorization.
 */

// Define a global variable to hold the token value
var SERVICE_M8_TOKEN = getSecretValue("serviceM8_token");

/**
 * Retrieves the secret value from Google Secret Manager.
 * @param {string} secretName - The name of the secret.
 * @param {string} projectId - The ID of the Google Cloud project.
 * @param {string} [version="latest"] - The version of the secret. Defaults to "latest".
 * @returns {string} - The secret value.
 */
function getSecretValue(secretName, projectId, version) {
  projectId = projectId || "YOUR_PROJECT_ID"; // Replace with your actual project ID
  version = version || "latest";

  var secretPayload = SecretManager.SecretVersion.access({
    name: 'projects/' + projectId + '/secrets/' + secretName + '/versions/' + version
  }).payload.data;

  return Utilities.newBlob(Utilities.base64Decode(secretPayload)).getDataAsString();
}

// Now you can use the SERVICE_M8_TOKEN constant in any function within the project
function exampleFunction() {
  var url = "https://api.servicem8.com/api_1.0/endpoint"; // API endpoint
  var options = {
    'method': 'GET',
    'muteHttpExceptions': false,
    'headers': {
      'Authorization': 'Basic ' + SERVICE_M8_TOKEN,
      'Content-Type': 'application/json',
    }
  };

  var response = UrlFetchApp.fetch(url, options); // Make the API request
  // Process the response...
}
